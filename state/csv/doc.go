package csv

//  このファイルでは、ユーザー定義の変数を記述します。
//
//  ここに定義された変数は、システム内にデータ領域が確保されます。
//  基本的に全ての変数は１次元以上の配列です。
//
//
//  各列の設定の仕方:
// 		Scope, DataType, VarName, FileName, Size, (Size2...)
//
//  1.	Scope: どこで使われるの？
//
// 			Scope = {Chara, System, Share, CSV}
// 				Chara:  各キャラクターについての変数
// 				System: システムについての変数
// 				Share:  セーブデータ間で共有するための変数
// 				CSV:    csvによる定数のみ
//
//  2.	DataType: 変数の型、扱い方
//
// 			DataType = {Int, Str}
// 				Int:    整数型、厳密にはint64
// 				Str:    文字列型
//
//  3.	VarName: 変数名
//
// 			ここで指定した名前が、実際にシステムやスクリプト上で
// 			使用されます
// 			空欄であった場合、FileNameから
// 			拡張子を取り除いたものを代わりに用います
// 			VarName, FileNameともに空欄であった場合、
// 			Errorを起こします
//
//  4.	FileName: どのファイルから読み込むの？
//
// 			FileName = *.csv
// 				例：  Base.csv や Abl.csv など
//
// 			1番目は”体力”, 2番めは”気力”といった、
// 			番号と変数名の対応をシステムに取り込みます。
//
// 			空欄であった場合、データ領域のみが確保されます。
// 			これを利用して、自由に使える変数を定義できます。
//
//  5.	Size: 変数の個数
//
// 			Sizeを0あるいは空欄にすると、CSVファイル内で一番大きいindex+1
//      のサイズに自動的に決まります。
//
//  6~.	Size2, ...(Option): 2次元以降の変数の個数
// 				未実装。無視されます。
//
//
//  例１：キャラクター変数の確保
//
// 			Chara, Int, Base, Base.csv, 100
//
// 			この場合、100個の整数データを持つキャラクター変数Baseを用意し、
// 			Base.csvの内容から各要素の名前を決定します。
//
//  例２：システム変数の確保(変数名の省略)
//
// 			System, Str, , Str.csv, 100
//
// 			この場合、100個の文字列データを持つシステム変数Strを用意し、
// 			Str.csvの内容から各要素の名前を決定します。
// 			変数名が省略されているため、代わりにファイル名の拡張子を
// 			取り除いたものを変数名として用います。
//
//  例３：CSVファイル内の内容のみを取り込む場合
//
// 			System, Str, Messages, Messages.csv, 0
//
// 			この場合、サイズが0なので、変数Messagesは確保されません。
// 			したがって、System, Str, といった項目は意味を成しません。
// 			しかし、Messages.csvが指定されているため、
// 			その内容から各要素の名前を決定し、それらについてのみ、
// 			定数としてシステム内で使うことができます。
//
