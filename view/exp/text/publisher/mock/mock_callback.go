// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mzki/erago/view/exp/text/publisher (interfaces: Callback)

// Package mock_publisher is a generated GoMock package.
package mock_publisher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	publisher "github.com/mzki/erago/view/exp/text/publisher"
)

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// OnPublish mocks base method.
func (m *MockCallback) OnPublish(arg0 *publisher.Paragraph) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnPublish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnPublish indicates an expected call of OnPublish.
func (mr *MockCallbackMockRecorder) OnPublish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPublish", reflect.TypeOf((*MockCallback)(nil).OnPublish), arg0)
}

// OnPublishTemporary mocks base method.
func (m *MockCallback) OnPublishTemporary(arg0 *publisher.Paragraph) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnPublishTemporary", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnPublishTemporary indicates an expected call of OnPublishTemporary.
func (mr *MockCallbackMockRecorder) OnPublishTemporary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPublishTemporary", reflect.TypeOf((*MockCallback)(nil).OnPublishTemporary), arg0)
}

// OnRemove mocks base method.
func (m *MockCallback) OnRemove(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRemove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnRemove indicates an expected call of OnRemove.
func (mr *MockCallbackMockRecorder) OnRemove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemove", reflect.TypeOf((*MockCallback)(nil).OnRemove), arg0)
}

// OnRemoveAll mocks base method.
func (m *MockCallback) OnRemoveAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnRemoveAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnRemoveAll indicates an expected call of OnRemoveAll.
func (mr *MockCallbackMockRecorder) OnRemoveAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemoveAll", reflect.TypeOf((*MockCallback)(nil).OnRemoveAll))
}
