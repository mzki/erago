// package pubdata intended for exporting data structure for
// other platforms such as mobile, wasm and so on.
// All of type of exported struct field and function signature should be
// restricted by the restriction of platform conversion.
// e.g. mobile type restrinction is found at
// https://pkg.go.dev/golang.org/x/mobile/cmd/gobind?utm_source=godoc#hdr-Type_restrictions

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: view/exp/text/pubdata/pubdata.proto

package pubdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentType int32

const (
	ContentType_CONTENT_TYPE_UNKNOWN     ContentType = 0
	ContentType_CONTENT_TYPE_TEXT        ContentType = 1
	ContentType_CONTENT_TYPE_TEXT_BUTTON ContentType = 2
	ContentType_CONTENT_TYPE_IMAGE       ContentType = 3
	ContentType_CONTENT_TYPE_SPACE       ContentType = 4
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_UNKNOWN",
		1: "CONTENT_TYPE_TEXT",
		2: "CONTENT_TYPE_TEXT_BUTTON",
		3: "CONTENT_TYPE_IMAGE",
		4: "CONTENT_TYPE_SPACE",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_UNKNOWN":     0,
		"CONTENT_TYPE_TEXT":        1,
		"CONTENT_TYPE_TEXT_BUTTON": 2,
		"CONTENT_TYPE_IMAGE":       3,
		"CONTENT_TYPE_SPACE":       4,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_view_exp_text_pubdata_pubdata_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_view_exp_text_pubdata_pubdata_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{0}
}

type Alignment int32

const (
	Alignment_ALIGNMENT_UNKNOWN Alignment = 0
	Alignment_ALIGNMENT_LEFT    Alignment = 1
	Alignment_ALIGNMENT_CENTER  Alignment = 2
	Alignment_ALIGNMENT_RIGHT   Alignment = 3
)

// Enum value maps for Alignment.
var (
	Alignment_name = map[int32]string{
		0: "ALIGNMENT_UNKNOWN",
		1: "ALIGNMENT_LEFT",
		2: "ALIGNMENT_CENTER",
		3: "ALIGNMENT_RIGHT",
	}
	Alignment_value = map[string]int32{
		"ALIGNMENT_UNKNOWN": 0,
		"ALIGNMENT_LEFT":    1,
		"ALIGNMENT_CENTER":  2,
		"ALIGNMENT_RIGHT":   3,
	}
)

func (x Alignment) Enum() *Alignment {
	p := new(Alignment)
	*p = x
	return p
}

func (x Alignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alignment) Descriptor() protoreflect.EnumDescriptor {
	return file_view_exp_text_pubdata_pubdata_proto_enumTypes[1].Descriptor()
}

func (Alignment) Type() protoreflect.EnumType {
	return &file_view_exp_text_pubdata_pubdata_proto_enumTypes[1]
}

func (x Alignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alignment.Descriptor instead.
func (Alignment) EnumDescriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{1}
}

// ImageFetchType indicates how image pixels to be included in ImageData.Data.
// This type is aliases for int since it may be encoded to the json format.
type ImageFetchType int32

const (
	ImageFetchType_IMAGE_FETCH_TYPE_UNKNOWN ImageFetchType = 0
	// ImageFetchTypeNone indicates no image pixel data in ImageData.
	// Client use URI of image to fetch pixels manually.
	ImageFetchType_IMAGE_FETCH_TYPE_NONE ImageFetchType = 1
	// ImageFetchRawRGBA indicates image pixels stored in raw RGBA bytes in
	// ImageData.
	ImageFetchType_IMAGE_FETCH_TYPE_RAW_RGBA ImageFetchType = 2
	// ImageFetchEncodedPNG indicates image pixels stored in png encoded bytes in
	// ImageData.
	ImageFetchType_IMAGE_FETCH_TYPE_ENCODED_PNG ImageFetchType = 3
)

// Enum value maps for ImageFetchType.
var (
	ImageFetchType_name = map[int32]string{
		0: "IMAGE_FETCH_TYPE_UNKNOWN",
		1: "IMAGE_FETCH_TYPE_NONE",
		2: "IMAGE_FETCH_TYPE_RAW_RGBA",
		3: "IMAGE_FETCH_TYPE_ENCODED_PNG",
	}
	ImageFetchType_value = map[string]int32{
		"IMAGE_FETCH_TYPE_UNKNOWN":     0,
		"IMAGE_FETCH_TYPE_NONE":        1,
		"IMAGE_FETCH_TYPE_RAW_RGBA":    2,
		"IMAGE_FETCH_TYPE_ENCODED_PNG": 3,
	}
)

func (x ImageFetchType) Enum() *ImageFetchType {
	p := new(ImageFetchType)
	*p = x
	return p
}

func (x ImageFetchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFetchType) Descriptor() protoreflect.EnumDescriptor {
	return file_view_exp_text_pubdata_pubdata_proto_enumTypes[2].Descriptor()
}

func (ImageFetchType) Type() protoreflect.EnumType {
	return &file_view_exp_text_pubdata_pubdata_proto_enumTypes[2]
}

func (x ImageFetchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageFetchType.Descriptor instead.
func (ImageFetchType) EnumDescriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{2}
}

// Paragraph is a block of content divided by hard return (\n).
type Paragraph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lines         []*Line                `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
	Alignment     Alignment              `protobuf:"varint,3,opt,name=alignment,proto3,enum=pubdata.Alignment" json:"alignment,omitempty"`
	Fixed         bool                   `protobuf:"varint,4,opt,name=fixed,proto3" json:"fixed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Paragraph) Reset() {
	*x = Paragraph{}
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraph) ProtoMessage() {}

func (x *Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paragraph.ProtoReflect.Descriptor instead.
func (*Paragraph) Descriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{0}
}

func (x *Paragraph) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Paragraph) GetLines() []*Line {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *Paragraph) GetAlignment() Alignment {
	if x != nil {
		return x.Alignment
	}
	return Alignment_ALIGNMENT_UNKNOWN
}

func (x *Paragraph) GetFixed() bool {
	if x != nil {
		return x.Fixed
	}
	return false
}

// Line is a line in view window.
type Line struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Boxes         []*Box                 `protobuf:"bytes,1,rep,name=boxes,proto3" json:"boxes,omitempty"`
	RuneWidth     int32                  `protobuf:"varint,2,opt,name=rune_width,json=runeWidth,proto3" json:"rune_width,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Line) Reset() {
	*x = Line{}
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{1}
}

func (x *Line) GetBoxes() []*Box {
	if x != nil {
		return x.Boxes
	}
	return nil
}

func (x *Line) GetRuneWidth() int32 {
	if x != nil {
		return x.RuneWidth
	}
	return 0
}

// Box is abstract content. It holds nomal text, unsplitable text and images and so on.
// The Box is the smallest element for whole content.
// The whole content consist with multiple Paragraph-s, which is divided by the hard return (\n).
// Paragraph consist with multiple Line-s, which is divided by rune width in the maximum width in
// the view window. The Line consists with multiple Box-s, which is divided by its attributes.
//
// The Box type can be validated by type assertion or ContentType().
type Box struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuneWidth     int32                  `protobuf:"varint,1,opt,name=rune_width,json=runeWidth,proto3" json:"rune_width,omitempty"`                                // box's width in runewidth.
	LineCountHint int32                  `protobuf:"varint,2,opt,name=line_count_hint,json=lineCountHint,proto3" json:"line_count_hint,omitempty"`                  // box's height hint, typically 1 but sometimes larger than 1.
	ContentType   ContentType            `protobuf:"varint,3,opt,name=content_type,json=contentType,proto3,enum=pubdata.ContentType" json:"content_type,omitempty"` // box's content type
	// Types that are valid to be assigned to Data:
	//
	//	*Box_TextData
	//	*Box_TextButtonData
	//	*Box_ImageData
	//	*Box_SpaceData
	Data          isBox_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Box) Reset() {
	*x = Box{}
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Box) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box) ProtoMessage() {}

func (x *Box) ProtoReflect() protoreflect.Message {
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box.ProtoReflect.Descriptor instead.
func (*Box) Descriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{2}
}

func (x *Box) GetRuneWidth() int32 {
	if x != nil {
		return x.RuneWidth
	}
	return 0
}

func (x *Box) GetLineCountHint() int32 {
	if x != nil {
		return x.LineCountHint
	}
	return 0
}

func (x *Box) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_CONTENT_TYPE_UNKNOWN
}

func (x *Box) GetData() isBox_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Box) GetTextData() *TextData {
	if x != nil {
		if x, ok := x.Data.(*Box_TextData); ok {
			return x.TextData
		}
	}
	return nil
}

func (x *Box) GetTextButtonData() *TextButtonData {
	if x != nil {
		if x, ok := x.Data.(*Box_TextButtonData); ok {
			return x.TextButtonData
		}
	}
	return nil
}

func (x *Box) GetImageData() *ImageData {
	if x != nil {
		if x, ok := x.Data.(*Box_ImageData); ok {
			return x.ImageData
		}
	}
	return nil
}

func (x *Box) GetSpaceData() *SpaceData {
	if x != nil {
		if x, ok := x.Data.(*Box_SpaceData); ok {
			return x.SpaceData
		}
	}
	return nil
}

type isBox_Data interface {
	isBox_Data()
}

type Box_TextData struct {
	TextData *TextData `protobuf:"bytes,9,opt,name=text_data,json=textData,proto3,oneof"`
}

type Box_TextButtonData struct {
	TextButtonData *TextButtonData `protobuf:"bytes,10,opt,name=text_button_data,json=textButtonData,proto3,oneof"`
}

type Box_ImageData struct {
	ImageData *ImageData `protobuf:"bytes,11,opt,name=image_data,json=imageData,proto3,oneof"`
}

type Box_SpaceData struct {
	SpaceData *SpaceData `protobuf:"bytes,12,opt,name=space_data,json=spaceData,proto3,oneof"`
}

func (*Box_TextData) isBox_Data() {}

func (*Box_TextButtonData) isBox_Data() {}

func (*Box_ImageData) isBox_Data() {}

func (*Box_SpaceData) isBox_Data() {}

// TextData is data for ContentTypeText.
type TextData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// text content should not contain hard return.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Foreground color represents 32bit RGB used to font face color
	Fgcolor int32 `protobuf:"varint,2,opt,name=fgcolor,proto3" json:"fgcolor,omitempty"`
	// Background color represents 32bit RGB used to background on text.
	Bgcolor       int32 `protobuf:"varint,3,opt,name=bgcolor,proto3" json:"bgcolor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextData) Reset() {
	*x = TextData{}
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextData) ProtoMessage() {}

func (x *TextData) ProtoReflect() protoreflect.Message {
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextData.ProtoReflect.Descriptor instead.
func (*TextData) Descriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{3}
}

func (x *TextData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextData) GetFgcolor() int32 {
	if x != nil {
		return x.Fgcolor
	}
	return 0
}

func (x *TextData) GetBgcolor() int32 {
	if x != nil {
		return x.Bgcolor
	}
	return 0
}

// TextButtonData is data for ContentTypeTextButton.
type TextButtonData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TextData      *TextData              `protobuf:"bytes,1,opt,name=text_data,json=textData,proto3" json:"text_data,omitempty"`
	Command       string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextButtonData) Reset() {
	*x = TextButtonData{}
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextButtonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextButtonData) ProtoMessage() {}

func (x *TextButtonData) ProtoReflect() protoreflect.Message {
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextButtonData.ProtoReflect.Descriptor instead.
func (*TextButtonData) Descriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{4}
}

func (x *TextButtonData) GetTextData() *TextData {
	if x != nil {
		return x.TextData
	}
	return nil
}

func (x *TextButtonData) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

// ImageData is data for ContentTypeImage.
type ImageData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Source          string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	WidthPx         int32                  `protobuf:"varint,2,opt,name=width_px,json=widthPx,proto3" json:"width_px,omitempty"`
	HeightPx        int32                  `protobuf:"varint,3,opt,name=height_px,json=heightPx,proto3" json:"height_px,omitempty"`
	WidthTextScale  int32                  `protobuf:"varint,4,opt,name=width_text_scale,json=widthTextScale,proto3" json:"width_text_scale,omitempty"`
	HeightTextScale int32                  `protobuf:"varint,5,opt,name=height_text_scale,json=heightTextScale,proto3" json:"height_text_scale,omitempty"`
	Data            []byte                 `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	DataFetchType   ImageFetchType         `protobuf:"varint,11,opt,name=data_fetch_type,json=dataFetchType,proto3,enum=pubdata.ImageFetchType" json:"data_fetch_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{5}
}

func (x *ImageData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ImageData) GetWidthPx() int32 {
	if x != nil {
		return x.WidthPx
	}
	return 0
}

func (x *ImageData) GetHeightPx() int32 {
	if x != nil {
		return x.HeightPx
	}
	return 0
}

func (x *ImageData) GetWidthTextScale() int32 {
	if x != nil {
		return x.WidthTextScale
	}
	return 0
}

func (x *ImageData) GetHeightTextScale() int32 {
	if x != nil {
		return x.HeightTextScale
	}
	return 0
}

func (x *ImageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageData) GetDataFetchType() ImageFetchType {
	if x != nil {
		return x.DataFetchType
	}
	return ImageFetchType_IMAGE_FETCH_TYPE_UNKNOWN
}

// SpaceBox holds space data.
type SpaceData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpaceData) Reset() {
	*x = SpaceData{}
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceData) ProtoMessage() {}

func (x *SpaceData) ProtoReflect() protoreflect.Message {
	mi := &file_view_exp_text_pubdata_pubdata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceData.ProtoReflect.Descriptor instead.
func (*SpaceData) Descriptor() ([]byte, []int) {
	return file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP(), []int{6}
}

var File_view_exp_text_pubdata_pubdata_proto protoreflect.FileDescriptor

const file_view_exp_text_pubdata_pubdata_proto_rawDesc = "" +
	"\n" +
	"#view/exp/text/pubdata/pubdata.proto\x12\apubdata\"\x88\x01\n" +
	"\tParagraph\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12#\n" +
	"\x05lines\x18\x02 \x03(\v2\r.pubdata.LineR\x05lines\x120\n" +
	"\talignment\x18\x03 \x01(\x0e2\x12.pubdata.AlignmentR\talignment\x12\x14\n" +
	"\x05fixed\x18\x04 \x01(\bR\x05fixed\"I\n" +
	"\x04Line\x12\"\n" +
	"\x05boxes\x18\x01 \x03(\v2\f.pubdata.BoxR\x05boxes\x12\x1d\n" +
	"\n" +
	"rune_width\x18\x02 \x01(\x05R\truneWidth\"\xee\x02\n" +
	"\x03Box\x12\x1d\n" +
	"\n" +
	"rune_width\x18\x01 \x01(\x05R\truneWidth\x12&\n" +
	"\x0fline_count_hint\x18\x02 \x01(\x05R\rlineCountHint\x127\n" +
	"\fcontent_type\x18\x03 \x01(\x0e2\x14.pubdata.ContentTypeR\vcontentType\x120\n" +
	"\ttext_data\x18\t \x01(\v2\x11.pubdata.TextDataH\x00R\btextData\x12C\n" +
	"\x10text_button_data\x18\n" +
	" \x01(\v2\x17.pubdata.TextButtonDataH\x00R\x0etextButtonData\x123\n" +
	"\n" +
	"image_data\x18\v \x01(\v2\x12.pubdata.ImageDataH\x00R\timageData\x123\n" +
	"\n" +
	"space_data\x18\f \x01(\v2\x12.pubdata.SpaceDataH\x00R\tspaceDataB\x06\n" +
	"\x04data\"R\n" +
	"\bTextData\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x18\n" +
	"\afgcolor\x18\x02 \x01(\x05R\afgcolor\x12\x18\n" +
	"\abgcolor\x18\x03 \x01(\x05R\abgcolor\"Z\n" +
	"\x0eTextButtonData\x12.\n" +
	"\ttext_data\x18\x01 \x01(\v2\x11.pubdata.TextDataR\btextData\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\"\x86\x02\n" +
	"\tImageData\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\x12\x19\n" +
	"\bwidth_px\x18\x02 \x01(\x05R\awidthPx\x12\x1b\n" +
	"\theight_px\x18\x03 \x01(\x05R\bheightPx\x12(\n" +
	"\x10width_text_scale\x18\x04 \x01(\x05R\x0ewidthTextScale\x12*\n" +
	"\x11height_text_scale\x18\x05 \x01(\x05R\x0fheightTextScale\x12\x12\n" +
	"\x04data\x18\n" +
	" \x01(\fR\x04data\x12?\n" +
	"\x0fdata_fetch_type\x18\v \x01(\x0e2\x17.pubdata.ImageFetchTypeR\rdataFetchType\"\x11\n" +
	"\tSpaceDataJ\x04\b\x01\x10\x02*\x8c\x01\n" +
	"\vContentType\x12\x18\n" +
	"\x14CONTENT_TYPE_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11CONTENT_TYPE_TEXT\x10\x01\x12\x1c\n" +
	"\x18CONTENT_TYPE_TEXT_BUTTON\x10\x02\x12\x16\n" +
	"\x12CONTENT_TYPE_IMAGE\x10\x03\x12\x16\n" +
	"\x12CONTENT_TYPE_SPACE\x10\x04*a\n" +
	"\tAlignment\x12\x15\n" +
	"\x11ALIGNMENT_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eALIGNMENT_LEFT\x10\x01\x12\x14\n" +
	"\x10ALIGNMENT_CENTER\x10\x02\x12\x13\n" +
	"\x0fALIGNMENT_RIGHT\x10\x03*\x8a\x01\n" +
	"\x0eImageFetchType\x12\x1c\n" +
	"\x18IMAGE_FETCH_TYPE_UNKNOWN\x10\x00\x12\x19\n" +
	"\x15IMAGE_FETCH_TYPE_NONE\x10\x01\x12\x1d\n" +
	"\x19IMAGE_FETCH_TYPE_RAW_RGBA\x10\x02\x12 \n" +
	"\x1cIMAGE_FETCH_TYPE_ENCODED_PNG\x10\x03B-Z+github.com/mzki/erago/view/exp/text/pubdatab\x06proto3"

var (
	file_view_exp_text_pubdata_pubdata_proto_rawDescOnce sync.Once
	file_view_exp_text_pubdata_pubdata_proto_rawDescData []byte
)

func file_view_exp_text_pubdata_pubdata_proto_rawDescGZIP() []byte {
	file_view_exp_text_pubdata_pubdata_proto_rawDescOnce.Do(func() {
		file_view_exp_text_pubdata_pubdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_view_exp_text_pubdata_pubdata_proto_rawDesc), len(file_view_exp_text_pubdata_pubdata_proto_rawDesc)))
	})
	return file_view_exp_text_pubdata_pubdata_proto_rawDescData
}

var file_view_exp_text_pubdata_pubdata_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_view_exp_text_pubdata_pubdata_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_view_exp_text_pubdata_pubdata_proto_goTypes = []any{
	(ContentType)(0),       // 0: pubdata.ContentType
	(Alignment)(0),         // 1: pubdata.Alignment
	(ImageFetchType)(0),    // 2: pubdata.ImageFetchType
	(*Paragraph)(nil),      // 3: pubdata.Paragraph
	(*Line)(nil),           // 4: pubdata.Line
	(*Box)(nil),            // 5: pubdata.Box
	(*TextData)(nil),       // 6: pubdata.TextData
	(*TextButtonData)(nil), // 7: pubdata.TextButtonData
	(*ImageData)(nil),      // 8: pubdata.ImageData
	(*SpaceData)(nil),      // 9: pubdata.SpaceData
}
var file_view_exp_text_pubdata_pubdata_proto_depIdxs = []int32{
	4,  // 0: pubdata.Paragraph.lines:type_name -> pubdata.Line
	1,  // 1: pubdata.Paragraph.alignment:type_name -> pubdata.Alignment
	5,  // 2: pubdata.Line.boxes:type_name -> pubdata.Box
	0,  // 3: pubdata.Box.content_type:type_name -> pubdata.ContentType
	6,  // 4: pubdata.Box.text_data:type_name -> pubdata.TextData
	7,  // 5: pubdata.Box.text_button_data:type_name -> pubdata.TextButtonData
	8,  // 6: pubdata.Box.image_data:type_name -> pubdata.ImageData
	9,  // 7: pubdata.Box.space_data:type_name -> pubdata.SpaceData
	6,  // 8: pubdata.TextButtonData.text_data:type_name -> pubdata.TextData
	2,  // 9: pubdata.ImageData.data_fetch_type:type_name -> pubdata.ImageFetchType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_view_exp_text_pubdata_pubdata_proto_init() }
func file_view_exp_text_pubdata_pubdata_proto_init() {
	if File_view_exp_text_pubdata_pubdata_proto != nil {
		return
	}
	file_view_exp_text_pubdata_pubdata_proto_msgTypes[2].OneofWrappers = []any{
		(*Box_TextData)(nil),
		(*Box_TextButtonData)(nil),
		(*Box_ImageData)(nil),
		(*Box_SpaceData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_view_exp_text_pubdata_pubdata_proto_rawDesc), len(file_view_exp_text_pubdata_pubdata_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_view_exp_text_pubdata_pubdata_proto_goTypes,
		DependencyIndexes: file_view_exp_text_pubdata_pubdata_proto_depIdxs,
		EnumInfos:         file_view_exp_text_pubdata_pubdata_proto_enumTypes,
		MessageInfos:      file_view_exp_text_pubdata_pubdata_proto_msgTypes,
	}.Build()
	File_view_exp_text_pubdata_pubdata_proto = out.File
	file_view_exp_text_pubdata_pubdata_proto_goTypes = nil
	file_view_exp_text_pubdata_pubdata_proto_depIdxs = nil
}
